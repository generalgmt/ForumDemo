"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("questions"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("questions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listQuestions",{url:"/questions",templateUrl:"modules/questions/views/list-questions.client.view.html"}).state("createQuestion",{url:"/questions/create",templateUrl:"modules/questions/views/create-question.client.view.html"}).state("viewQuestion",{url:"/questions/:questionId",templateUrl:"modules/questions/views/view-question.client.view.html"}).state("editQuestion",{url:"/questions/:questionId/edit",templateUrl:"modules/questions/views/edit-question.client.view.html"})}]),angular.module("questions").controller("QuestionsController",["$scope","$stateParams","$location","Authentication","Questions","Comments","Votes","Vote_Downs",function($scope,$stateParams,$location,Authentication,Questions,Comments,Votes){$scope.authentication=Authentication,$scope.comment_state=!1,$scope.hasvoted=!1,$scope.notvoted=!1,$scope.create=function(){var question=new Questions({question:this.question});question.$save(function(response){$location.path("questions/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message}),this.question=""},$scope.remove=function(question){if(question){question.$remove();for(var i in $scope.questions)$scope.questions[i]===question&&$scope.questions.splice(i,1)}else $scope.question.$remove(function(){$location.path("questions")})},$scope.update=function(){var question=$scope.question;question.$update(function(){$location.path("questions/"+question._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.create_ans=function(){var comment=new Comments({questionId:this.question._id,comment:this.comment});$scope.question.comments.push({comment:this.comment,user:Authentication.user.displayName,created:Date.now()}),comment.$save(function(response){$scope.question=response},function(errorResponse){$scope.error=errorResponse.data.message}),$scope.comment_state=!1},$scope.remove_ans=function(comm){var comment=new Comments({questionId:$scope.question._id,_id:comm._id});comment.$remove(function(){for(var i in $scope.question.comments)$scope.question.comments[i]===comm&&$scope.question.comments.splice(i,1)},function(errorResponse){$scope.error=errorResponse.data.message})};$scope.create_vote=function(comment,value){var vote=new Votes({questionId:$scope.question._id,commentId:comment._id,vote:value});vote.$save(function(response){$scope.question=response},function(errorResponse){$scope.error=errorResponse.data.message}),$scope.vote=""},$scope.remove_vote=function(vote_param){var vote=new Votes({questionId:$scope.question._id,commentId:vote_param._id});console.log(vote),console.log(vote_param.splice(1,1)),vote_param.splice(1,1).$save(function(response){$scope.question=response},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.countVotes=function(comment){for(var count=0,i=0;i<comment.votes.length;i++)count+=comment.votes[i].vote;return count},$scope.find=function(){$scope.questions=Questions.query()},$scope.findOne=function(){$scope.question=Questions.get({questionId:$stateParams.questionId})},$scope.show_comment=function(){$scope.comment_state=$scope.comment_state===!1?!0:!1}}]),angular.module("questions").factory("Questions",["$resource",function($resource){return $resource("questions/:questionId",{questionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("questions").factory("Comments",["$resource",function($resource){return $resource("questions/:questionId/comments/:id",{questionId:"@questionId",id:"@_id"},{update:{method:"PUT"}})}]),angular.module("questions").factory("Votes",["$resource",function($resource){return $resource("questions/:questionId/comments/:commentId/votes/:id",{questionId:"@questionId",commentId:"@commentId",id:"@_id"},{update:{method:"PUT"}})}]),angular.module("questions").factory("Vote_Downs",["$resource",function($resource){return $resource("questions/:questionId/comments/:commentId/vote_downs/:id",{questionId:"@questionId",commentId:"@commentId",id:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/signin.client.view.html"}).state("user_account",{url:"/user_account",templateUrl:"modules/users/views/user_account.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);